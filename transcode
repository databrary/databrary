#!/usr/bin/env bash
# Transcode job management.
# This is run on transcode.host, called from conf/transctl.sh
# It is also the SLURM script so is in fact run twice, once with arguments (up to the sbatch), once with variables.

#SBATCH --nodes=1
#SBATCH --mem=1024m 

SLURM=$0
if [[ $SLURM != /* ]] ; then
    SLURM=$PWD/$SLURM
fi

while getopts 'i:h:d:v:m:k:s:r:f:' opt ; do case "$opt" in
    i) id=$OPTARG ;;
    h) hpc=$OPTARG ;;
    d) dir=$OPTARG ;;
    v) version=$OPTARG ;;
    m) mount=$OPTARG ;;

    k) kill=$OPTARG ;;
    s) ;;
    r) url=$OPTARG ;;
    f) fmt=$OPTARG ;;

    ?) exit 1 ;;
esac ; done
shift $[OPTIND-1]
args=("$@")

if [[ -z $id || -z $dir || -z $kill && ( -z $url || -z $fmt ) ]] ; then
    echo "$0: usage error: $*" >&2
    exit 1
fi

if [[ -n $mount ]] ; then
    echo "Found mount=$mount" >&2
    echo "rsync $mount/$dir/$id $dir/$id" >&2
    rsync "$mount/$dir/$id" "$dir/$id" || exit 1
fi

cd $dir || exit 1

IN=$id
OUT=$id.$fmt
LOG=$id.log

if [[ -n $kill ]] ; then
    if [[ -n $hpc ]] ; then
        scancel $kill
    else
        kill $kill
    fi
    rm -f "$IN" "$OUT"
    exit 0
fi

if [[ ! -f $IN ]] ; then
    echo "$IN: file not found" >&2
    exit 1
fi

IFS='
'
if [[ -n $hpc ]] ; then
    echo "Preparing sbatch args on $hpc" >&2
    rate=80000
    sec=$[60+`stat -c %s "$IN"`/$rate]
    if [[ $sec -gt 604800 ]] ; then
        sec=604800
    elif [[ $sec -lt 43200 ]] ; then
	sec=43200
    fi
    min=$[$sec/60]
    echo "${args[*]}" > $id.args
    echo "sbatch -job-name=${dir##*/}$id --export=dir=$PWD,id=$id,fmt=$fmt,url=$url,version=$version -t $min $SLURM" >&2
    exec sbatch --job-name="${dir##*/}$id" --export="dir=$PWD,id=$id,fmt=$fmt,url=$url,version=$version" -t $min "$SLURM"
elif [[ -n $SLURM_JOB_NAME ]] ; then # if SLURM_JOB_NAME is non zero length
  # remove everything in the name past the first dot .
    PID=${SLURM_JOBID%%.*}
    read -d '' -r -a args < $id.args
else
    PID=$$
fi
echo "Process PID=$PID" >&2
exec >$LOG 2>&1

case $fmt in
    mp4) outargs=(-f mp4 -g 60 -c:v libx264 -pix_fmt yuvj420p -c:a libfdk_aac) ;;
    mp3) outargs=(-f mp3 -c:a libmp3lame -q:a 1) ;;
    *)
        echo "Unknown format $fmt" >&2
        exit 1
esac

sleep 5 # hope server knows job has started by now

ls -s "$IN"
echo "Run ffmpeg" >&2
ffmpeg -loglevel warning -benchmark -threads ${SLURM_NTASKS:-1} -i "$IN" -map_metadata -1 -metadata comment="databrary.org ${dir##*/}/$version" -metadata description="http://databrary.org/asset/$id" "${args[@]}" -threads ${SLURM_NTASKS:-1} "${outargs[@]}" -y "$OUT"
r=$?
[[ -f "$OUT" ]] && ls -s "$OUT"
if [[ $r -ne 0 ]] ; then
    echo "Found r=$r , remove OUT=$OUT" >&2
    rm -f "$OUT"
else
    echo "compute sha1 OUT=$OUT" >&2
    sha1=`sha1sum "$OUT"`
    rm -f "$id.args"
fi

echo "POST to databrary url=$url pid=$PID res=$r sha1=$sha1 lof=$LOG" >&2
# sha1 arg is split to work around weird HPC error:
curl -sSk --data-urlencode "pid=$PID" --data-urlencode "res=$r" ${sha1:+--data-urlencode} ${sha1:+"sha1=${sha1%% *}"} --data-urlencode "log@$LOG" "$url"


