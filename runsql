#!/bin/bash -e
set -o pipefail
umask 077

top=`git rev-parse --show-cdup || echo "Assuming $PWD is top." >&2`
schema=${top}schema

if [[ ! -f ${schema}.sql ]] ; then
	echo "${schema}.sql is missing.  You are probably in the wrong directory."
	exit 1
fi

if [[ ! -f ${top}databrary.conf ]] ; then
	echo "${top}databrary.conf is missing.  See README."
	exit 1
fi

source "${top}load_configs.sh"

if [[ -z ${db[db]} || -z ${db[user]} ]] ; then
	echo "Could not read database configuration."
	exit 1
fi

if [[ -n ${db[pass]} && ! -f ~/.pgpass ]] ; then
	echo "${db[host]:-localhost}:${db[port]}:${db[db]}:${db[user]}:${db[pass]}" >> ~/.pgpass
fi

declare -a args
if [[ -n ${db[host]} ]] ; then
	args=(-h ${db[host]} -p ${db[port]})
elif [[ -n ${db[sock]} ]] ; then
	args=(-h ${db[sock]%/.s.PGSQL.*})
fi
args=("${args[@]}" -U ${db[user]})
while [[ $1 = -?* ]] ; do
	args=("${args[@]}" $1)
	shift
done

runsql () {
	psql -q "${args[@]}" -vON_ERROR_STOP=on -f "${@:--}" "${db[db]}"
}

dbreset () {
	if [[ -z $1 ]] ; then
		pg_dump -Fc -f unreset.dump "${args[@]}" "${db[db]}"
	fi
	runsql <<EOF
DROP SCHEMA IF EXISTS public, audit, ingest CASCADE;
CREATE SCHEMA public;
EOF
}

record () {
	if [[ $1 = 0 ]] ; then
		runsql <<EOF
CREATE TABLE schema (name varchar(64) Primary Key, applied timestamptz NOT NULL Default now());
EOF
	else
		runsql <<EOF
INSERT INTO schema (name) VALUES ('$1');
EOF
	fi
}

schema () {
	if [[ -z $1 ]] ; then
		runsql $schema.sql
		for s in $schema/*.sql ; do
			s=${s%.sql}
			s=${s#$schema/}
			record $s
		done
	else
		record $1
		if [[ $1 = *_root ]] ; then
			runsql $schema/$1.sql -U ${db[super]:-postgres}
		else
			runsql $schema/$1.sql
		fi
	fi
}

check_dump() {
	mkdir -p $schema/check
	pg_dump -O -Tschema -f $schema/check/$1.sql "${args[@]}" "${db[db]}"
}

check_diff() {
	check_dump $2
	echo "Checking $1 vs. $2..."
	diff -F'^[A-Z]' -u0 $schema/check/$1.sql $schema/check/$2.sql || (
		echo -n "OK? "
		read y
		[[ -z $y || $y = y* ]]
	)
}

schema_all () {
	for s in $schema/*.sql ; do
		s=${s%.sql}
		s=${s#$schema/}
		if [[ -n $1 ]] ; then
			check_dump $s
		fi
		echo "Running schema $s..."
		schema $s
	done
}

usage () {
	cat <<EOF
Usage:
  runsql  		run psql interactively
  runsql -|<file>	execute contents of file
  runsql reset		reset the database (clear public schema)
  runsql schema	[NAME]	apply [master] schema
  runsql check		apply and compare master schema and evolutions
  runsql dump ARGS.. 	run pg_dump
  runsql restore ARGS.. run pg_restore
Any non-argument options are passed to the run command.
EOF
}

if [[ $# -eq 0 ]] ; then
	echo "Use '$0 help' for help"
	exec psql "${args[@]}" "${db[db]}"
elif [[ $1 = help && $# -eq 1 ]] ; then
	usage
elif [[ $# -eq 1 && ( $1 = - || -f $1 ) ]] ; then
	runsql "$1"
elif [[ $1 = reset && $# -eq 1 ]] ; then
	dbreset
elif [[ $1 = schema ]] ; then
	shift
	if [[ $# -eq 0 ]] ; then
		dbreset
		schema
	else
		for l in "$@" ; do
			schema $l
		done
	fi
elif [[ $1 = check ]] ; then
	dbreset
	if ! [[ $schema/check/schema.sql -nt $schema.sql ]] ; then
		echo "Running schema..."
		schema
		check_dump schema
	fi
	dbreset 1
	schema_all 1
	check_diff schema evolve
	rm -rf $schema/check
elif [[ $1 = dump ]] ; then
	shift
	exec pg_dump "${args[@]}" "$@" "${db[db]}"
elif [[ $1 = restore ]] ; then
	shift
	if [[ $# -eq 0 ]] ; then
		set -- unreset.dump
	fi
	dbreset 1
	exec pg_restore "${args[@]}" -d "${db[db]}" -O "$@"
else
	usage
	exit 1
fi
